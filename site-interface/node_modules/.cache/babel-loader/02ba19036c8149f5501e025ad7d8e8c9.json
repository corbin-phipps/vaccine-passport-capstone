{"ast":null,"code":"var _jsxFileName = \"/Users/corbinphipps/Desktop/vaccine-passport-capstone/site-interface/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport \"./App.css\";\nimport Routes from \"./Routes\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { AppContext } from \"./libs/contextLib\";\nimport { useHistory } from \"react-router-dom\";\nimport { onError } from \"./libs/errorLib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // 1) load user session\n  // browser's history api\n  const history = useHistory(); // setting to true -> start checking current authentication state of user\n\n  const [isAuthenticating, setIsAuthenticating] = useState(true); // updating the application state by setting that the user is logged in\n  // set false, because user not logged in yet. calling userHasAuthenticated updates it\n\n  const [isAuthenticated, userHasAuthenticated] = useState(false);\n  /* The useEffect hook takes a function and an array of variables.\n  The function will be called every time the component is rendered.\n  And the array of variables tell React to only re-run our function\n  if the passed in array of variables have changed.\n  This allows us to control when our function gets run.\n   If we don’t pass in an array of variables, our hook gets executed everytime our component is rendered.\n  If we pass in some variables, on every render React will first check if those variables have changed,\n  before running our function.\n  If we pass in an empty list of variables, then it’ll only run our function on the FIRST render.\n  In our case, we only want to check the user’s authentication state when our app first loads.\n  So we’ll use the third option; just pass in an empty list of variables — [].*/\n\n  useEffect(() => {\n    onLoad();\n  }, []);\n\n  async function onLoad() {\n    try {\n      //    TODO await Auth.currentSession();\n      userHasAuthenticated(true);\n    } catch (e) {\n      if (e !== 'No current user') {\n        onError(e);\n      }\n    }\n\n    setIsAuthenticating(false);\n  }\n  /* redirects us back to the login page once the user logs out */\n\n\n  async function handleLogout() {\n    //      await Auth.signOut();\n    userHasAuthenticated(false);\n    history.push(\"/login\");\n  }\n\n  return (// dont render until !isAuthenticating because loading user session is asynch.\n    // this ensures app doesnt change states in the middle of init load\n    !isAuthenticating && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App container py-3\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        collapseOnSelect: true,\n        bg: \"light\",\n        expand: \"md\",\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(LinkContainer, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(Navbar.Brand, {\n            className: \"font-weight-bold text-muted\",\n            children: \"Vaccine Passport\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Navbar.Toggle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Navbar.Collapse, {\n          className: \"justify-content-end\",\n          children: /*#__PURE__*/_jsxDEV(Nav, {\n            activeKey: window.location.pathname,\n            children: isAuthenticated ? /*#__PURE__*/_jsxDEV(Nav.Link, {\n              onClick: handleLogout,\n              children: \"Logout\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(LinkContainer, {\n                to: \"/signup\",\n                children: /*#__PURE__*/_jsxDEV(Nav.Link, {\n                  children: \"Signup\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(LinkContainer, {\n                to: \"/login\",\n                children: /*#__PURE__*/_jsxDEV(Nav.Link, {\n                  children: \"Login\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n        value: {\n          isAuthenticated,\n          userHasAuthenticated\n        },\n        children: /*#__PURE__*/_jsxDEV(Routes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  );\n}\n\n_s(App, \"qr8qPFFhGb0ESIMtLeRIOE8ucpY=\", false, function () {\n  return [useHistory];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/corbinphipps/Desktop/vaccine-passport-capstone/site-interface/src/App.js"],"names":["React","useState","useEffect","Navbar","Routes","Nav","LinkContainer","AppContext","useHistory","onError","App","history","isAuthenticating","setIsAuthenticating","isAuthenticated","userHasAuthenticated","onLoad","e","handleLogout","push","window","location","pathname"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport \"./App.css\";\nimport Routes from \"./Routes\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { AppContext } from \"./libs/contextLib\";\nimport { useHistory } from \"react-router-dom\";\nimport { onError } from \"./libs/errorLib\";\n\nfunction App() {\n    // 1) load user session\n\n    // browser's history api\n    const history = useHistory();\n    // setting to true -> start checking current authentication state of user\n    const [isAuthenticating, setIsAuthenticating] = useState(true);\n\n    // updating the application state by setting that the user is logged in\n    // set false, because user not logged in yet. calling userHasAuthenticated updates it\n    const [isAuthenticated, userHasAuthenticated] = useState(false);\n\n    /* The useEffect hook takes a function and an array of variables.\n    The function will be called every time the component is rendered.\n    And the array of variables tell React to only re-run our function\n    if the passed in array of variables have changed.\n    This allows us to control when our function gets run.\n\n    If we don’t pass in an array of variables, our hook gets executed everytime our component is rendered.\n    If we pass in some variables, on every render React will first check if those variables have changed,\n    before running our function.\n    If we pass in an empty list of variables, then it’ll only run our function on the FIRST render.\n    In our case, we only want to check the user’s authentication state when our app first loads.\n    So we’ll use the third option; just pass in an empty list of variables — [].*/\n    useEffect(() => {\n      onLoad();\n    }, []);\n\n    async function onLoad() {\n      try {\n    //    TODO await Auth.currentSession();\n        userHasAuthenticated(true);\n      }\n      catch(e) {\n        if (e !== 'No current user') {\n          onError(e);\n        }\n      }\n\n      setIsAuthenticating(false);\n    }\n\n    /* redirects us back to the login page once the user logs out */\n    async function handleLogout() {\n//      await Auth.signOut();\n\n      userHasAuthenticated(false);\n\n      history.push(\"/login\");\n    }\n\n  return (\n  // dont render until !isAuthenticating because loading user session is asynch.\n  // this ensures app doesnt change states in the middle of init load\n    !isAuthenticating && (\n      <div className=\"App container py-3\">\n        <Navbar collapseOnSelect bg=\"light\" expand=\"md\" className=\"mb-3\">\n          <LinkContainer to=\"/\">\n            <Navbar.Brand className=\"font-weight-bold text-muted\">\n              Vaccine Passport\n            </Navbar.Brand>\n          </LinkContainer>\n          <Navbar.Toggle />\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Nav activeKey={window.location.pathname}>\n              {isAuthenticated ? (\n                <Nav.Link onClick={handleLogout}>Logout</Nav.Link>\n              ) : (\n                <>\n                  <LinkContainer to=\"/signup\">\n                    <Nav.Link>Signup</Nav.Link>\n                  </LinkContainer>\n                  <LinkContainer to=\"/login\">\n                    <Nav.Link>Login</Nav.Link>\n                  </LinkContainer>\n                </>\n              )}\n\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n        <AppContext.Provider value={{ isAuthenticated, userHasAuthenticated }}>\n          <Routes />\n        </AppContext.Provider>\n      </div>\n    )\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}